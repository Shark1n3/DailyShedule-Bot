import telebot
import time
from telebot import types
import requests
import json
from webbrowser import get
import sqlite3
token = '<Your token>'
bot = telebot.TeleBot(token)
name1 = None
busies = None
done = False
btc_usdt = None
eth_usdt = None
usd_rub = None
eur_rub = None
sol_usdt = None
temp = None
condition = None
secret_text = None
secret_pass = None
feels_like = None

with sqlite3.connect("data.db") as db:
    cursor = db.cursor()
    query = """CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        name VARCHAR(30),
        busies TEXT(500),
        admin NOT NULL DEFAULT 1,
        banned DEFAULT 0
    )"""
    cursor.executescript(query)

@bot.message_handler(commands=['start'])
def greeting_message(message):
     startmsg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Çüëã\n\n–Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥—É —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µüóí\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è ‚¨áÔ∏è")
     bot.register_next_step_handler(startmsg, busy)

@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("–ú–æ–π –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –î–Ω—è")
    markup.add(btn)
    bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –∑–∞–≥—Ä—É–∂—É –º–µ–Ω—é...", reply_markup=markup)
    donee_reload(message)

@bot.message_handler(commands=['admin'])
def admin_menu(message):
    user_id = message.from_user.id
    if user_id == 1274013505:
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton(text='üì£–†–∞—Å—Å—ã–ª–∫–∞', callback_data='post')
        btn2 = types.InlineKeyboardButton(text='üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats')
        btn3 = types.InlineKeyboardButton(text='üî¥–ó–∞–±–∞–Ω–∏—Ç—å', callback_data='ban')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ò–ª—å—è üåü\n–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω –º–µ–Ω—é: ", reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")

@bot.callback_query_handler(func= lambda call: True)
def adm_functions(call):
    if call.data == 'post':
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')
        markup.add(button)
        ass = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=markup)
        bot.register_next_step_handler(ass, post)
    elif call.data == 'stats':
        stats(call.message)
    elif call.data == 'ban':
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')
        markup.add(button)
        assip = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∑–∞–±–∞–Ω–∏—Ç—å', reply_markup=markup)
        bot.register_next_step_handler(assip, ban)
    elif call.data == 'back':
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton(text='üì£–†–∞—Å—Å—ã–ª–∫–∞', callback_data='post')
        btn2 = types.InlineKeyboardButton(text='üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats')
        btn3 = types.InlineKeyboardButton(text='üî¥–ó–∞–±–∞–Ω–∏—Ç—å', callback_data='ban')
        markup.add(btn1, btn2, btn3)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ò–ª—å—è üåü\n–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω –º–µ–Ω—é: ', reply_markup=markup)
    elif call.data == 'change_busies':
        markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup2.add(btn)
        be = bot.send_message(call.message.chat.id, "–í—Å–µ –¥–µ–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω—ã? –û—Ç–ª–∏—á–Ω–æ! üëå \n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª", reply_markup=markup2)
        bot.register_next_step_handler(be, reload_busies)
    elif call.data == 'crypto':
        currency1(call.message)


def post(message):
    if message.text != "–ú–æ–π –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è":
     db = sqlite3.connect("data.db")
     cursor = db.cursor()
     post_text = message.text
     cursor.execute("SELECT user_id FROM users")
     users = cursor.fetchall()
     for u in users:
        user = u[0]
        bot.send_message(user, post_text)
    else:
        donee_reload(message)

def ban(message):
    db = sqlite3.connect("data.db")
    cursor = db.cursor()
    ban_user = message.text
    cursor.execute("SELECT banned FROM users WHERE user_id = ?;",(ban_user,))
    is_banned = cursor.fetchone()
    if is_banned != None:
     cursor.execute("UPDATE users SET banned = 1 WHERE user_id = ?;",(ban_user,))
     db.commit()
     bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω \n–î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –Ω–∞–ø–∏—à–∏ /unban ID")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID")

@bot.message_handler(commands=['unban'])
def unban(message):
    if message.from_user.id == 1274013505:
     db = sqlite3.connect("data.db")
     cursor = db.cursor()
     bui = message.text
     try:
      banned_id = int(bui[6:])
      cursor.execute("UPDATE users SET banned = 0 WHERE user_id = ?;",(banned_id,))
      db.commit()
     except ValueError:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /unban ID")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

def stats(message):
    db = sqlite3.connect("data.db")
    cursor = db.cursor()
    cursor.execute("SELECT user_id FROM users")
    us = cursor.fetchall()
    users = len(us)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')
    markup.add(button)
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text=f'–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {users}', reply_markup=markup)

def busy(message):
    global name1
    name1 = message.text
    ps = bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name1} \n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –¥–µ–ª –Ω–∞ –¥–µ–Ω—å\n–í–æ—Ç –¢–∞–∫:\n–î–µ–ª–æ 1\n–î–µ–ª–æ 2\n–î–µ–ª–æ 3")
    bot.register_next_step_handler(ps, donee)

def donee(message):
    global btc_usdt, eth_usdt, sol_usdt, eur_rub, usd_rub, done, temp, condition, feels_like, name1
    currencies()
    weather()
    db = sqlite3.connect("data.db")
    cursor = db.cursor()
    try:
        busies = message.text
        user_id = message.from_user.id
        cursor.execute("INSERT INTO users(user_id, name, busies) VALUES(?, ?, ?)",(user_id,name1,busies))
        db.commit()
        cursor.execute("SELECT name, busies FROM users WHERE user_id = ?;",(user_id,))
        busies1 = cursor.fetchone()
        print(busies1)
    except sqlite3.Error as e:
        print("SQL Error: ", e)
    ass = bot.send_message(message.chat.id, "–ü–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ! ‚úÖ \n\n–°–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª...")
    time.sleep(2)
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton(text='üìã –ü–æ–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª', callback_data='change_busies')
    btn2 = types.InlineKeyboardButton(text='üí∏ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', callback_data='crypto')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name1} üåü\n========================\n–í–æ—Ç —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ –¥–µ–Ω—å:\n{busies}\n========================\nüÖ±Ô∏èBTC: {btc_usdt}$ \nüí†ETH: {eth_usdt}$ \nüåÄSOL: {sol_usdt}$ \nüíµUSD: {usd_rub}‚ÇΩ\nüí∂EUR: {eur_rub}‚ÇΩ\n========================\n{condition} +{temp}\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: +{feels_like}", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def shedule(message):
    if message.text == "–ú–æ–π –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –î–Ω—è":
        donee_reload(message)
    if message.text == "–û—Ç–º–µ–Ω–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton("–ú–æ–π –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –î–Ω—è")
        markup.add(btn)
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω—è—é..", reply_markup=markup)

def currency1(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = "–û—Ç–º–µ–Ω–∞"
    markup.add(btn)
    isi = bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫—É—Ä—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å üí∏", reply_markup=markup)
    bot.register_next_step_handler(isi, custom_currency)

def reload_busies(message):
    global busies
    db = sqlite3.connect("data.db")
    cursor = db.cursor()
    user_id = message.from_user.id
    if message.text != "–û—Ç–º–µ–Ω–∞":
     try: 
         cursor.execute("UPDATE users SET busies = ? WHERE user_id = ?;",(message.text, user_id))
         db.commit()
         cursor.execute("SELECT busies FROM users WHERE user_id = ?;",(user_id,))
         busiesl = cursor.fetchone()
         print(busiesl)
         busies = busiesl[0]
         print(busies)
     except sqlite3.Error as e:
        print("SQL error: ", e)
    donee_reload(message)


def donee_reload(message):
    global btc_usdt, eth_usdt, sol_usdt, eur_rub, usd_rub, temp, condition, name1, busies, feels_like
    db = sqlite3.connect("data.db")
    cursor = db.cursor()
    user_id = message.from_user.id
    busies = None
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton(text='üìã –ü–æ–º–µ–Ω—è—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª', callback_data='change_busies')
    btn2 = types.InlineKeyboardButton(text='üí∏ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', callback_data='crypto')
    markup.add(btn1, btn2)
    try:
        cursor.execute("SELECT busies, name FROM users WHERE user_id = ?;", (user_id,))
        busies1 = cursor.fetchone()
        busies = busies1[0]
        name1 = busies1[1]
    except sqlite3.Error as e:
        print("Error: ", e)
    weather()
    currencies()
    bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name1} üåü\n========================\n–í–æ—Ç —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ –¥–µ–Ω—å:\n{busies}\n========================\nüÖ±Ô∏èBTC: {btc_usdt}$ \nüí†ETH: {eth_usdt}$ \nüåÄSOL: {sol_usdt}$ \nüíµUSD: {usd_rub}‚ÇΩ\nüí∂EUR: {eur_rub}‚ÇΩ\n========================\n{condition} +{temp}\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: +{feels_like}", reply_markup=markup)

def currencies():
    global btc_usdt, eth_usdt, sol_usdt, eur_rub, usd_rub
    response = requests.get(url="https://api.coingecko.com/api/v3/coins/bitcoin")
    jresponse = json.loads(response.text)
    btc_usdt = str(round(jresponse.get("market_data").get("current_price").get("usd")))
    response2 = requests.get(url="https://api.coingecko.com/api/v3/coins/ethereum")
    jresponse2 = json.loads(response2.text)
    eth_usdt = str(round(jresponse2.get("market_data").get("current_price").get("usd")))
    response3 = requests.get(url="https://api.coingecko.com/api/v3/coins/solana")
    jresponse3 = json.loads(response3.text)
    sol_usdt = str(round(jresponse3.get("market_data").get("current_price").get("usd")))
    response_fiat = requests.get(url="https://www.cbr-xml-daily.ru/daily_json.js")
    jfiat = json.loads(response_fiat.text)
    usd_rub = str(round(jfiat.get("Valute").get("USD").get("Value")))
    eur_rub = str(round(jfiat.get("Valute").get("EUR").get("Value")))

def custom_currency(message):
    db = sqlite3.connect("data.db")
    cursor = db.cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT banned FROM users WHERE user_id = ?;",(user_id,))
    is_banned = cursor.fetchone()[0]
    if is_banned == 0:
     if message.text != "–û—Ç–º–µ–Ω–∞":
      coin = message.text
      response = requests.get(url=f"https://api.coingecko.com/api/v3/coins/{coin}")
      jresp = json.loads(response.text)
     try:
      custom_value = str(round(jresp.get("market_data").get("current_price").get("usd")))
     except AttributeError:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–ª–∏ –≤–≤–µ–ª–∏ –µ–≥–æ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã")
        bot.send_message(message.chat.id, f"{coin} - USD: {custom_value}$")
     else:
        donee_reload(message)
    else:
        bot.send_message(message.chat.id, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. \n__–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω? –ü–∏—à–∏ - @risely__", parse_mode="Markdown")

def weather():
    global temp, condition, feels_like
    weather1 = requests.get(url="https://api.weather.yandex.ru/v2/forecast?lat=53.507852&lon=49.420411", headers={"X-Yandex-API-Key" : "8e45e1a6-86fb-44ce-8035-480574a446df"})
    jweather = json.loads(weather1.text)
    act_weather = str(jweather.get("fact").get("temp"))
    temp = act_weather
    pre_condition = str(jweather.get("fact").get("condition"))
    feels_like = str(jweather.get("fact").get("feels_like"))
    if pre_condition == "overcast":
        condition = "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ"
    elif pre_condition == "partly-cloudy":
        condition = "‚õÖÔ∏è –ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ"
    elif pre_condition == "clear":
        condition = "‚òÄÔ∏è –Ø—Å–Ω–æ"
    elif pre_condition == "cloudy":
        condition = "üå• –û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"
    elif pre_condition == "drizzle":
        condition = "üíß –ú–µ–ª–∫–∏–π –¥–æ–∂–¥—å (–º–æ—Ä–æ—Å—å)"
    elif pre_condition == "light-rain":
        condition = "üí¶ –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å"
    elif pre_condition == "rain":
        condition = "üåß –î–æ–∂–¥—å"
    elif pre_condition == "moderate-rain":
        condition = "üåß –£–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "heavy-rain":
        condition = "üåß –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "continous-heavy-rain":
        condition = "üåß –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "showers":
        condition = "üåä –õ–∏–≤–µ–Ω—å"
    elif pre_condition == "wet-snow":
        condition = "üå® –°–Ω–µ–≥ —Å –¥–æ–∂–¥—ë–º"
    elif pre_condition == "snow":
        condition = "‚ùÑÔ∏è –°–Ω–µ–≥"
    elif pre_condition == "thunderstorm":
        condition = "üå© –ì—Ä–æ–∑–∞"
    elif pre_condition == "thunderstorm-with-rain":
        condition = "‚õà –î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π"
    print(temp, pre_condition)


bot.infinity_polling()

    



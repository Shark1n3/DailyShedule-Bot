import telebot
import time
from telebot import types
import requests
import json
from webbrowser import get
token = '5433287136:AAFkvFzi0AhAKhpjTlwk38lXXEZ-HMIPeAE'
bot = telebot.TeleBot(token)
name = None
busies = None
done = False
btc_usdt = None
eth_usdt = None
usd_rub = None
eur_rub = None
sol_usdt = None
temp = None
condition = None
secret_text = None
secret_pass = None

@bot.message_handler(commands=['start'])
def greeting_message(message):
    startmsg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Çüëã\n\n–Ø - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥—É —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µüóí\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è ‚¨áÔ∏è")
    bot.register_next_step_handler(startmsg, busy)

def busy(message):
    global name
    name = message.text
    ps = bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name} \n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –¥–µ–ª –Ω–∞ –¥–µ–Ω—å\n–í–æ—Ç –¢–∞–∫:\n–î–µ–ª–æ 1\n–î–µ–ª–æ 2\n–î–µ–ª–æ 3")
    bot.register_next_step_handler(ps, donee)

def donee(message):
    global btc_usdt, eth_usdt, sol_usdt, eur_rub, usd_rub, done, busies, temp, condition
    currencies()
    weather()
    ass = bot.send_message(message.chat.id, "–ü–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ! ‚úÖ \n\n–°–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª...")
    busies = message.text
    time.sleep(2)
    markup_inline = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_btn1 = types.KeyboardButton('–ú–æ–π –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –î–Ω—è')
    item_btn2 = types.KeyboardButton('–ü–æ–º–µ–Ω—è—Ç—å –°–ø–∏—Å–æ–∫ –î–µ–ª')
    item_btn3 = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –ö—É—Ä—Å –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã')
    markup_inline.add(item_btn1, item_btn2, item_btn3)
    bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name} üåü\n========================\n–í–æ—Ç —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ –¥–µ–Ω—å:\n{busies}\n========================\nüÖ±Ô∏èBTC: {btc_usdt}$ \nüí†ETH: {eth_usdt}$ \nüåÄSOL: {sol_usdt}$ \nüíµUSD: {usd_rub}‚ÇΩ\nüí∂EUR: {eur_rub}‚ÇΩ\n========================\n{condition} +{temp}", reply_markup=markup_inline)

@bot.message_handler(content_types=['text'])
def shedule(message):
    if message.text == "–ü–æ–º–µ–Ω—è—Ç—å –°–ø–∏—Å–æ–∫ –î–µ–ª":
        reload = bot.send_message(message.chat.id, "–í—Å–µ –¥–µ–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω—ã? –û—Ç–ª–∏—á–Ω–æ!üëå \n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª")
        bot.register_next_step_handler(reload, reload_busies)
    elif message.text == "–ú–æ–π –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –î–Ω—è":
        donee_reload(message)
    elif message.text == "–£–∑–Ω–∞—Ç—å –ö—É—Ä—Å –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
        currency1(message)
    elif message.text == "–ú–æ–∏ –°–µ–∫—Ä–µ—Ç—ã":
        secrets(message)

def secrets(message):
    global secret_text
    if secret_text != None:
        secrets_pass(message)
    else:
     sg = bot.send_message(message.chat.id, "–≠–π, –∞ —Ç—ã –∑–Ω–∞–ª, —á—Ç–æ —è —É–º–µ—é —Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–∫—Ä–µ—Ç—ã? üòâ \n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ —Ö–æ—Ç–µ–ª –±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–µ, –∏ —è –±—É–¥—É –Ω–∞–¥–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–¥ –ø–∞—Ä–æ–ª–µ–º üîë")
     bot.register_next_step_handler(sg, secrets2)

def secrets2(message):
    global secret_text
    secret_text = message.text
    st = bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —è –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª üëå \n–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å, —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    bot.register_next_step_handler(st, secret_pass_go)

def secret_pass_go(message):
    global secret_pass
    secret_pass = message.text
    bot.send_message(message.chat.id, "–í—Å—ë –≥–æ—Ç–æ–≤–æ! ‚úÖ \n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º —Å–µ–∫—Ä–µ—Ç–∞–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")

def secrets_pass(message):
    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –°–µ–∫—Ä–µ—Ç')
    markup2.add(btn)
    hy = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=markup2)
    bot.register_next_step_handler(hy, enter_pass)

def enter_pass(message):
    global secret_pass, secret_text
    if message.text == secret_pass:
        bot.send_message(message.chat.id, secret_text)
    else:
        bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π")


def currency1(message):
    isi = bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫—É—Ä—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å üí∏")
    bot.register_next_step_handler(isi, custom_currency)

def reload_busies(message):
    global busies
    busies = message.text
    donee_reload(message)


def donee_reload(message):
    global btc_usdt, eth_usdt, sol_usdt, eur_rub, usd_rub, temp, condition
    weather()
    currencies()
    bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name} üåü\n========================\n–í–æ—Ç —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ –¥–µ–Ω—å:\n{busies}\n========================\nüÖ±Ô∏èBTC: {btc_usdt}$ \nüí†ETH: {eth_usdt}$ \nüåÄSOL: {sol_usdt}$ \nüíµUSD: {usd_rub}‚ÇΩ\nüí∂EUR: {eur_rub}‚ÇΩ\n========================\n{condition} +{temp}")

def currencies():
    global btc_usdt, eth_usdt, sol_usdt, eur_rub, usd_rub
    response = requests.get(url="https://api.coingecko.com/api/v3/coins/bitcoin")
    jresponse = json.loads(response.text)
    btc_usdt = str(round(jresponse.get("market_data").get("current_price").get("usd")))
    response2 = requests.get(url="https://api.coingecko.com/api/v3/coins/ethereum")
    jresponse2 = json.loads(response2.text)
    eth_usdt = str(round(jresponse2.get("market_data").get("current_price").get("usd")))
    response3 = requests.get(url="https://api.coingecko.com/api/v3/coins/solana")
    jresponse3 = json.loads(response3.text)
    sol_usdt = str(round(jresponse3.get("market_data").get("current_price").get("usd")))
    response_fiat = requests.get(url="https://www.cbr-xml-daily.ru/daily_json.js")
    jfiat = json.loads(response_fiat.text)
    usd_rub = str(round(jfiat.get("Valute").get("USD").get("Value")))
    eur_rub = str(round(jfiat.get("Valute").get("EUR").get("Value")))

def custom_currency(message):
    coin = message.text
    response = requests.get(url=f"https://api.coingecko.com/api/v3/coins/{coin}")
    jresp = json.loads(response.text)
    try:
     custom_value = str(round(jresp.get("market_data").get("current_price").get("usd")))
    except AttributeError:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–ª–∏ –≤–≤–µ–ª–∏ –µ–≥–æ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã")
    bot.send_message(message.chat.id, f"{coin} - USD: {custom_value}$")

def weather():
    global temp, condition
    weather1 = requests.get(url="https://api.weather.yandex.ru/v2/forecast?lat=53.5303&lon=49.3461", headers={"X-Yandex-API-Key" : "8e45e1a6-86fb-44ce-8035-480574a446df"})
    jweather = json.loads(weather1.text)
    act_weather = str(jweather.get("fact").get("temp"))
    temp = act_weather
    pre_condition = str(jweather.get("fact").get("condition"))
    if pre_condition == "overcast":
        condition = "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ"
    elif pre_condition == "partly-cloudy":
        condition = "‚õÖÔ∏è –ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ"
    elif pre_condition == "clear":
        condition = "‚òÄÔ∏è –Ø—Å–Ω–æ"
    elif pre_condition == "cloudy":
        condition = "üå• –û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"
    elif pre_condition == "drizzle":
        condition = "üíß –ú–µ–ª–∫–∏–π –¥–æ–∂–¥—å (–º–æ—Ä–æ—Å—å)"
    elif pre_condition == "light-rain":
        condition = "üí¶ –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å"
    elif pre_condition == "rain":
        condition = "üåß –î–æ–∂–¥—å"
    elif pre_condition == "moderate-rain":
        condition = "üåß –£–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "heavy-rain":
        condition = "üåß –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "continous-heavy-rain":
        condition = "üåß –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "showers":
        condition = "üåä –õ–∏–≤–µ–Ω—å"
    elif pre_condition == "wet-snow":
        condition = "üå® –°–Ω–µ–≥ —Å –¥–æ–∂–¥—ë–º"
    elif pre_condition == "snow":
        condition = "‚ùÑÔ∏è –°–Ω–µ–≥"
    elif pre_condition == "thunderstorm":
        condition = "üå© –ì—Ä–æ–∑–∞"
    elif pre_condition == "thunderstorm-with-rain":
        condition = "‚õà –î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π"
    print(temp, pre_condition)




bot.infinity_polling()

# 13.06 content types [text]
# –ü–æ–∏—Å–∫–∞—Ç—å API –∫—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
# –î–µ–∫–æ—Ä–∞—Ü–∏—è

# 14.06
# –¢–æ—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ –ø–æ –∫–Ω–æ–ø–æ—á–∫–µ
# –ö—É–ø–∏—Ç—å —Å–µ—Ä–≤–∞–∫ –∏ –∑–∞–ª–∏—Ç—å —Ç—É–¥–∞ –±–æ—Ç–∞

# –ò—Ç–æ–≥–æ –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ 3 –¥–Ω—è, –ø–æ 5 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å.

    


